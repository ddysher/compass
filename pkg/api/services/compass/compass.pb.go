// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compass.proto

/*
Package compass is a generated protocol buffer package.

It is generated from these files:
	compass.proto

It has these top-level messages:
	CreateCompassReleaseRequest
	CreateCompassReleaseResponse
*/
package compass

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import hapi_release5 "k8s.io/helm/pkg/proto/hapi/release"
import hapi_chart "k8s.io/helm/pkg/proto/hapi/chart"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateCompassReleaseRequest struct {
	Chart     string             `protobuf:"bytes,1,opt,name=chart" json:"chart,omitempty"`
	Name      string             `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string             `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Values    *hapi_chart.Config `protobuf:"bytes,4,opt,name=values" json:"values,omitempty"`
	Timeout   int64              `protobuf:"varint,5,opt,name=timeout" json:"timeout,omitempty"`
	Waith     bool               `protobuf:"varint,6,opt,name=waith" json:"waith,omitempty"`
}

func (m *CreateCompassReleaseRequest) Reset()                    { *m = CreateCompassReleaseRequest{} }
func (m *CreateCompassReleaseRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCompassReleaseRequest) ProtoMessage()               {}
func (*CreateCompassReleaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateCompassReleaseRequest) GetChart() string {
	if m != nil {
		return m.Chart
	}
	return ""
}

func (m *CreateCompassReleaseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCompassReleaseRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateCompassReleaseRequest) GetValues() *hapi_chart.Config {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *CreateCompassReleaseRequest) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *CreateCompassReleaseRequest) GetWaith() bool {
	if m != nil {
		return m.Waith
	}
	return false
}

type CreateCompassReleaseResponse struct {
	Release *hapi_release5.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
}

func (m *CreateCompassReleaseResponse) Reset()                    { *m = CreateCompassReleaseResponse{} }
func (m *CreateCompassReleaseResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateCompassReleaseResponse) ProtoMessage()               {}
func (*CreateCompassReleaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateCompassReleaseResponse) GetRelease() *hapi_release5.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateCompassReleaseRequest)(nil), "compass.CreateCompassReleaseRequest")
	proto.RegisterType((*CreateCompassReleaseResponse)(nil), "compass.CreateCompassReleaseResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CompassService service

type CompassServiceClient interface {
	CreateCompassRelease(ctx context.Context, in *CreateCompassReleaseRequest, opts ...grpc.CallOption) (*CreateCompassReleaseResponse, error)
}

type compassServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompassServiceClient(cc *grpc.ClientConn) CompassServiceClient {
	return &compassServiceClient{cc}
}

func (c *compassServiceClient) CreateCompassRelease(ctx context.Context, in *CreateCompassReleaseRequest, opts ...grpc.CallOption) (*CreateCompassReleaseResponse, error) {
	out := new(CreateCompassReleaseResponse)
	err := grpc.Invoke(ctx, "/compass.CompassService/CreateCompassRelease", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompassService service

type CompassServiceServer interface {
	CreateCompassRelease(context.Context, *CreateCompassReleaseRequest) (*CreateCompassReleaseResponse, error)
}

func RegisterCompassServiceServer(s *grpc.Server, srv CompassServiceServer) {
	s.RegisterService(&_CompassService_serviceDesc, srv)
}

func _CompassService_CreateCompassRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompassReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).CreateCompassRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compass.CompassService/CreateCompassRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).CreateCompassRelease(ctx, req.(*CreateCompassReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompassService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compass.CompassService",
	HandlerType: (*CompassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompassRelease",
			Handler:    _CompassService_CreateCompassRelease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compass.proto",
}

func init() { proto.RegisterFile("compass.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xc1, 0x4a, 0xf4, 0x30,
	0x10, 0x26, 0xff, 0xee, 0xb6, 0x7f, 0x67, 0xd1, 0xc3, 0xb0, 0x62, 0xa8, 0x7b, 0x28, 0x8b, 0x42,
	0xf1, 0xd0, 0x42, 0x7d, 0x03, 0xfb, 0x00, 0x42, 0xbc, 0x79, 0x8b, 0x61, 0xb4, 0x85, 0x6d, 0x53,
	0x9b, 0x74, 0x7d, 0x3e, 0xdf, 0x4c, 0x9a, 0x34, 0x78, 0x59, 0xf4, 0x94, 0x7c, 0x33, 0xdf, 0xcc,
	0x7c, 0x33, 0x1f, 0x5c, 0x28, 0xdd, 0x0d, 0xd2, 0x98, 0x62, 0x18, 0xb5, 0xd5, 0x18, 0x2f, 0x30,
	0x4d, 0x1b, 0x39, 0xb4, 0xe5, 0x48, 0x47, 0x92, 0x86, 0xc2, 0xeb, 0x49, 0xe9, 0xb5, 0xcb, 0xa9,
	0x46, 0x8e, 0xb6, 0x54, 0xba, 0x7f, 0x6b, 0xdf, 0x7d, 0xe2, 0xf0, 0xc5, 0xe0, 0xa6, 0x1e, 0x49,
	0x5a, 0xaa, 0x7d, 0x1b, 0xe1, 0xeb, 0x04, 0x7d, 0x4c, 0x64, 0x2c, 0xee, 0x60, 0xe3, 0xaa, 0x38,
	0xcb, 0x58, 0x9e, 0x08, 0x0f, 0x10, 0x61, 0xdd, 0xcb, 0x8e, 0xf8, 0x3f, 0x17, 0x74, 0x7f, 0xdc,
	0x43, 0x32, 0xbf, 0x66, 0x90, 0x8a, 0xf8, 0xca, 0x25, 0x7e, 0x02, 0x78, 0x0f, 0xd1, 0x49, 0x1e,
	0x27, 0x32, 0x7c, 0x9d, 0xb1, 0x7c, 0x5b, 0x61, 0x31, 0x2b, 0x2a, 0x5c, 0xbb, 0xa2, 0x76, 0x8a,
	0xc4, 0xc2, 0x40, 0x0e, 0xb1, 0x6d, 0x3b, 0xd2, 0x93, 0xe5, 0x9b, 0x8c, 0xe5, 0x2b, 0x11, 0xe0,
	0xac, 0xe6, 0x53, 0xb6, 0xb6, 0xe1, 0x51, 0xc6, 0xf2, 0xff, 0xc2, 0x83, 0xc3, 0x13, 0xec, 0xcf,
	0xaf, 0x60, 0x06, 0xdd, 0x1b, 0xc2, 0x12, 0xe2, 0xe5, 0x1a, 0x6e, 0x8b, 0x6d, 0x75, 0xe5, 0x87,
	0x87, 0x13, 0x05, 0x7e, 0x60, 0x55, 0x13, 0x5c, 0x2e, 0xad, 0x9e, 0x69, 0x3c, 0xb5, 0x8a, 0x50,
	0xc1, 0xee, 0xdc, 0x08, 0xbc, 0x2d, 0x82, 0x19, 0xbf, 0x1c, 0x31, 0xbd, 0xfb, 0x83, 0xe5, 0x75,
	0x3e, 0x26, 0x2f, 0xc1, 0xcb, 0xd7, 0xc8, 0xb9, 0xf3, 0xf0, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x34,
	0xd3, 0x6a, 0x04, 0xec, 0x01, 0x00, 0x00,
}
